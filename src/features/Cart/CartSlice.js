import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { addToCart,deleteItemsFromCart,fetchItemsByUserId, resetCart, updateCart } from './CartAPI';

const initialState = {
  value: 0,
  items: [],
};

console.log('Cart Slice Initialized'); // Log the initialization of the slice

export const addToCartAsync = createAsyncThunk(
  'cart/addToCart',
  async (item) => {
    const response = await addToCart(item);

    return response.data;
  }
);
export const fetchItemsByUserIdAsync = createAsyncThunk(
  'cart/fetchItemsByUserId',
  async (userId) => {
    const response = await fetchItemsByUserId(userId);
    console.log('API Response:', response); // Log the API response
    return response.data;
  }
);
export const updateCartAsync = createAsyncThunk(
  'cart/updateCart',
  async (item) => {
    const response = await updateCart(item);

    return response.data;
    
  }
);
export const deleteItemsFromCartAsync = createAsyncThunk(
  'cart/deleteItemsFromCart',
  async (itemId) => {
    const response = await deleteItemsFromCart(itemId);

    return response.data;
  }
);
export const resetCartAsync = createAsyncThunk(
  'cart/resetCart',
  async (userId) => {
    const response = await resetCart(userId);

    return response.data;
  }
);

export const cartSlice = createSlice({
  name: 'cart',
  initialState,

  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload);
  
        // Add toast notification here
        
      })
      .addCase(fetchItemsByUserIdAsync.pending, (state) => {
        state.status = 'loading';
      })
      // .addCase(fetchItemsByUserIdAsync.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   console.log('Fulfilled Payload:', action.payload); // Log the action payload
      //   state.items=action.payload;
      // })
      .addCase(fetchItemsByUserIdAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log('Fulfilled Payload:', action.payload); // Log the action payload
        if (Array.isArray(action.payload)) {
          state.items = action.payload;
        } else {
          // Handle the case where the payload is not an array (e.g., log an error)
          console.log('Error: Payload is not an array');
        }
      })
      
      .addCase(updateCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.items.findIndex(item=>item.id===action.payload.id)
        state.items[index]=action.payload;
        
      })
      
      .addCase(deleteItemsFromCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteItemsFromCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index =  state.items.findIndex(item=>item.id===action.payload.id)
        state.items.splice(index,1);
      })
      .addCase(resetCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(resetCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items=[]
      })
  },
});

export const { increment } = cartSlice.actions;


// export const selectItems = (state) => {
//   return state.cart.items;
// };

export const selectItems = (state) => state.cart.items;
export const selectCartStatus = (state) =>state.cart.status;



export default cartSlice.reducer;
